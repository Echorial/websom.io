info {
	"name": "page-docs-component",
	"route": "component/:component",
	"nested": "/docs",
	"type": "page",
	"keywords": "component, ui, vue"
}

template {
	<div class="docs-page-component">
		<g-h class="docs-component-preview">
			<g-v m="6" s="12">
				<div class="docs-component-preview-side transparent-background center-content">
					<div class="docs-component-wrap"><component :is="comp" v-bind="compProps" /></div>
				</div>
			</g-v>
			<g-v m="6" s="12" class="hide-on-small">
				<div class="docs-component-preview-side transparent-background center-content">
					<card class="docs-component-props">
						<span class="docs-tag">&lt;{{comp}}</span>
						<div v-for="(prop, p) in pack.vue.props" v-if="p != 'config' && p != 'websomView'" class="docs-prop">
							<span class="docs-attribute">{{p}}<span class="docs-equals">=</span></span><span class="docs-value">"<input v-model="compProps[p]" type="text" spellcheck="false" :size="compProps[p].length - 1" />"</span>
						</div>
						<span class="docs-tag">&gt;</span>
					</card>
				</div>
			</g-v>
		</g-h>

		<div class="doc-page">
			<h1>&lt;{{comp}}&gt;</h1>
			<component :is="'docs-components-' + comp" />
			
			<hr>

			<h1>Props</h1>

			<div v-for="(prop, p) in pack.vue.props" :key="p" v-if="p != 'config' && p != 'websomView'">
				<h2>{{p}}</h2>
				<h3 class="doc-prop-def">Default: <span class="docs-value">"{{typeof prop.default === 'function' ? prop.default() : prop.default}}"</span></h3>
				<h3 class="doc-prop-def">Accepted Types: <span class="docs-attribute" v-for="(t, i) in (Array.isArray(prop.type) ? prop.type : [prop.type])" :key="i">{{t.name}}{{Array.isArray(prop.type) ? (i < prop.type.length - 1 ? ', ' : '') : ''}}</span></h3>
				<p>{{prop.description}}</p>
			</div>

			<hr>

			<h1>Config</h1>

			<div v-if="Object.keys(pack.config).length > 0">

			</div>
			<h3 v-else>This component doesn't have any config options.</h3>
		</div>
	</div>
}

script {
	export default {
		data: () => ({
			compProps: {}
		}),
		computed: {
			comp() {
				return this.$route.params.component;
			},
			pack() {
				return this.websomPackages.find(p => p.info.name == this.comp);
			}
		},
		created() {
			let view = this.pack;
			if (Array.isArray(view.vue.props)) {
				// Handle props
			}else{
				for (let p in view.vue.props) {
					if (p == "websomView" || p == "config")
						continue;

					let prop = view.vue.props[p];
					if (typeof prop.default === "function")
						this.$set(this.compProps, p, prop.default());
					else
						this.$set(this.compProps, p, prop.default);
				}
			}
		},
		methods: {
			metaDescription() {
				return `Documentation and examples for the <${this.comp}> Websom component.`;
			},
			title() {
				return `<${this.comp}> - Websom`;
			}
		}
	}
}

style {
	.docs-component-preview-side {
		height: 100%;
		background-attachment: fixed;
	}

	.doc-prop-def {
		color: rgb(127, 127, 127);
	}

	.docs-component-preview {
		min-height: 450px;
	}

	.docs-page-component {
		width: 100%;
		height: 100%;
		position: relative;

		.doc-page {
			height: auto !important;
		}
	}

	.docs-prop {
		margin-left: 5em;
		border: 1px solid transparent;
		
		&:focus-within {
			border: 1px solid rgba(127, 127, 127, 0.4);

			.docs-tag, .docs-attribute, .docs-value, input, .docs-equals {
				color: white;
			}
		}
	}

	.docs-tag {
		color: #5db0d7;
	}

	.docs-attribute {
		color: #9bbbdc;
	}

	.docs-equals {
		color: #5db0d7;
	}

	.docs-value {
		color: #f29766;
		font-family: Consolas, Lucida Console, Courier New, monospace;

		> input {
			background: transparent;
			border: 0;
			color: #f29766;
			cursor: default;

			outline: 0;

			&::selection {
				background: #f29766;
				color: var(--dark-background);
			}
		}
	}

	.docs-component-props {
		//position: absolute !important;
		//top: 24px;
		//right: 24px;
		margin: 0 !important;

		width: calc(95%);

		font-family: Consolas, Lucida Console, Courier New, monospace;
	}

	.docs-component-wrap {
		background: var(--background);
		padding: 6px;
		border-radius: 2px;
		width: 75%;
	}

	@media @small {
		.docs-component-props {
			position: absolute !important;
			top: 25%;
			left: 24px;
			margin: 0 !important;

			width: calc(100% - 48px);
		}
	}
}